-How to install an ubuntu/debian linux dev environment of Synthesis
*tested on Ubuntu 10.04 Desktop, 64 bit edition

Ubuntu Package Dependencies (if install-linux.sh script mentioned below is run as 'sudo', these will get installed on line 87 of script):
gcc
make
python (2.6.4ubuntu1)
python-dev
python-setuptools
zlib1g-dev
libreadline5
libreadline-dev
readline-common
ledit
libpq-dev


-Get the code:
user@host:~/workspace$ svn co http://xsd.alexandriaconsulting.com/repos/trunk/synthesis

-Prep the environment for buildout:
-Copy the 'src' directory in trunk to the 'installer/buildout/src' directory, and rename to 'synthesis'.  So this will look like: './installer/buildout/src/synthesis/'

user@host:~/workspace$ cd synthesis 
user@host:~/workspace/synthesis$ cp -a ./src ./installer/buildout/src/src
user@host:~/workspace/synthesis$ mv ./installer/buildout/src/src ./installer/buildout/src/synthesis


Create a postgres database named 'synthesis' accessible to your user by following the "Alternative Server Setup Instructions" at  https://help.ubuntu.com/community/PostgreSQL , then that username and password has to be placed in conf/settings.py as mentioned below.

-Tweak the conf/settings.py file to match your email server (SMTPSERVER), your email eddress (SMTPSENDER), email password (SMTPSENDERPWD), the SMTPRECIPIENTS section, input file location user name (INPUTFILES_PATH= ["/home/put_your_username/...), postgres database user (DB_USER), postgres database user password (DB_PASSWD), etc.
(example using vim editor)
user@host:~/workspace/synthesis$ vim ./installer/buildout/src/synthesis/conf/settings.py

-Then try running the './installer/install-linux.sh' script, I'd personally use the 'ignore' option for database type and use your own database (which you set uo above) or 2nd choice would be the 'os' option which will do a yum/apt and attempt to install a postgres server.

user@host:~/workspace/synthesis$ cd ./installer
user@host:~/workspace/synthesis/installer$ chmod a+x install-linux.sh
user@host:~/workspace/synthesis/installer$ ./install-linux.sh -f ~/workspace/synthesis/installer/build -d ignore -s debian

*Note: you may have to run the above command as sudo if you are installing the postgres database package (i.e., using the '-d os' option)
* if you use the -d ignore option, you'll need to set up the database manually.  Create a database named 'synthesis' accessible to your user by following the "Alternative Server Setup Instructions" at  https://help.ubuntu.com/community/PostgreSQL , then that username and password has to be placed in conf/settings.py as mentioned above.

-Now let's run the source
-First, verify you now have the 'python' file which was generated during Buildout:

user@host:~/workspace/synthesis/installer/build# ls
borg.py			fileinput_unit_test_file_exists.py  logs			 security_unit_test.py
borg.pyc		fileinput_unit_test_no_file.py	    MainProcessor.py		 selector.py
build.sh		fileinputwatcher.py		    manage-joe.py		 selector.pyc
clsExceptions.py	fileinputwatcher.pyc		    manage.py			 selector_unit_test.py
clsExceptions.pyc	fileRouter.py			    MANIFEST.in			 setup.py
clsLogger.py		fileRouter.pyc			    nodebuilder.py		 smtpLibrary.py
clsLogger.pyc		fileUtils.py			    outputConfiguration.py	 smtpLibrary.pyc
clsPostProcessing.py	fileUtils.pyc			    parxmlreader.py		 svcpointxml20writer.py
clsSecurity.py		hmiscsv27writer.py		    parxmlreader.pyc		 testCase_settings.py
clsSecurity.pyc		hmisxml28reader.py		    postgresutils.py		 testCase_settings.pyc
conf			hmisxml28reader.pyc		    postgresutils.pyc		 translation.xml
data			hmisxml28writer.py		    python			 translation.xsd
DBObjects.py		__init__.py			    queryObject.py		 translator.py
DBObjects.pyc		iniUtils.py			    reader.py			 validate_unit_test.py
DBObjects_unit_test.py	interpretPicklist.py		    reader.pyc			 vendorxmlxxwriter.py
emailProcessor.py		jfcsxmlreader.py		    README_setup-dev-env.txt	 writer.py
emailProcessor.pyc	jfcsxmlreader.pyc		    README.txt			 XMLUtilities.py
errcatalog		logging.ini			    README_VersionControlDB.txt  xsd


-example of launching the 'MainProcessor.py' script:
user@host:~/workspace/synthesis/installer$ cd ~/workspace/synthesis/installer/build
user@host:~/workspace/synthesis/installer/build$ ./python MainProcessor.py 

fileinputwatcher.py determined we are running POSIX
/home/user/workspace/synthesis/installer/buildout/eggs/SQLAlchemy-0.4.7p1-py2.6.egg/sqlalchemy/util.py:7: DeprecationWarning: the sets module is deprecated
  import inspect, itertools, new, operator, sets, sys, warnings, weakref
FileUtilities() instantiated
FileUtilities() instantiated
FileUtilities() instantiated
FileUtilities() instantiated
FileUtilities() instantiated
MainProcessor instantiating FileUtilities
FileUtilities() instantiated
********************************************
* CAUTION: TEST MODE - This wipes DB Clean *
********************************************
************************************************************************************************************
* CTRL-C or CTRL-Break to Stop - (waiting before startup, in case you don't want to wipe your existing db) *
************************************************************************************************************
Sleeping for 10
entered the module
entered the function
2010-08-16 12:10:44,826 INFO sqlalchemy.engine.base.Engine.0x..50 select current_schema()
2010-08-16 12:10:44,827 INFO sqlalchemy.engine.base.Engine.0x..50 [None]
2010-08-16 12:10:44,828 INFO sqlalchemy.engine.base.Engine.0x..50 
        SELECT relname
        FROM pg_class c
        WHERE relkind = 'r'
          AND 'public' = (select nspname from pg_namespace n where n.oid = c.relnamespace)
        
2010-08-16 12:10:44,829 INFO sqlalchemy.engine.base.Engine.0x..50 {}
all tables dropped
Logs Dir exists:
Logging with INIFile: logging.ini
The Python Win32 extensions for NT (service, event logging) appear not to be available.
Now instantiating FileHandler
FileInputWatcher Initialized
*************Debugging On*************
FileInputWatcher.__init__ saying we are not running nt
selector instantiated and figuring out what schema are available
schema to potentially load: /home/user/workspace/synthesis/installer/build/xsd/Operation_PAR_Extend_HUD_HMIS_2_8.xsd
schema to potentially load: /home/user/workspace/synthesis/installer/build/xsd/HUD_HMIS_3_0.xsd
schema to potentially load: /home/user/workspace/synthesis/installer/build/xsd/versions/406/sp.xsd
schema to potentially load: /home/user/workspace/synthesis/installer/build/xsd/JFCS_CLIENT.xsd
schema to potentially load: /home/user/workspace/synthesis/installer/build/xsd/JFCS_SERVICE.xsd
schema to potentially load: /home/user/workspace/synthesis/installer/build/xsd/HUD_HMIS_2_8.xsd
Now running FileHandler.nonGUIRun()
We have a POSIX system, as determined by nonGUIRun().  So handing off to nonGUIPOSIXRun()
First, looking for preexisting files in input location.
Getting Files
Done Grabbing Files
Monitoring Directories: ['/home/user/workspace/synthesis/installer/build/InputFiles']
Watching started at Mon Aug 16 12:10:44 2010
Watching POSIX OS
pyinotify running in compatibility mode
Starting the threaded notifier on  ['/home/user/workspace/synthesis/installer/build/InputFiles']
Finished...
waiting..
waiting 2



-Now drop a test file from ~/workspace/synthesis/TestFiles into /home/user/workspace/synthesis/installer/build/InputFiles

user@host: cp ~/workspace/synthesis/TestFiles/HUD_HMIS_3_0_Instance.xml /home/user/workspace/synthesis/installer/build/InputFiles

-Then you'll see: 

Create: /home/eric/workspace/synthesis/installer/build/InputFiles/HUD_HMIS_3_0_Instance.xml
found file: /home/eric/workspace/synthesis/installer/build/InputFiles/HUD_HMIS_3_0_Instance.xml
...
-it runs for a while, while it determines what format the files are, and shred them.
-So that's it!  Synthesis is running.